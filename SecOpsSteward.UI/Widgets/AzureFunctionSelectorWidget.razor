@using Microsoft.Azure.Management.ResourceManager.Fluent
@using Microsoft.Azure.Management.AppService.Fluent
@using Microsoft.Azure.Management.Fluent
<MudContainer Class="p-3">
    <MudItem xs="12">
        <MudSelect T="ISubscription" Label="Subscription" Strict="true" Variant="Variant.Outlined" Class="py-2"
                   Value="@SelectedSubscription" ValueChanged="@SetAzureSubscription">
            @foreach (var subscription in Subscriptions)
            {
                <MudSelectItem T="ISubscription" Value="@subscription">@subscription.DisplayName</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12">
        <MudSelect T="IResourceGroup" Label="Resource Group" Strict="true" Variant="Variant.Outlined" Class="py-2"
                   Value="@SelectedResourceGroup" ValueChanged="@SetResourceGroup">
            @foreach (var resourceGroup in ResourceGroups)
            {
                <MudSelectItem T="IResourceGroup" Value="@resourceGroup">@resourceGroup.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12">
        <MudSelect T="IFunctionApp" Label="Function App" Strict="true" Variant="Variant.Outlined" Class="py-2"
                   Value="@SelectedFunction" ValueChanged="@SetFunction">
            @foreach (var resource in Resources.OrderBy(r => r.Name))
            {
                if (string.IsNullOrEmpty(resource.SystemAssignedManagedServiceIdentityPrincipalId))
                {
                    <MudSelectItem T="IFunctionApp" Disabled="true" Value="@resource">
                        @resource.Name <em>(No Managed Identity)</em>
                    </MudSelectItem>
                }
                else
                {
                    <MudSelectItem T="IFunctionApp" Value="@resource">@resource.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
</MudContainer>

@code
{
    // Select a *generic* Azure resource independent of managed services

    protected IEnumerable<ISubscription> Subscriptions { get; set; } = new List<ISubscription>();
    protected IEnumerable<IResourceGroup> ResourceGroups { get; set; } = new List<IResourceGroup>();
    protected IEnumerable<IFunctionApp> Resources { get; set; } = new List<IFunctionApp>();

    [Parameter]
    public ISubscription SelectedSubscription { get; set; }

    [Parameter]
    public EventCallback<ISubscription> SelectedSubscriptionChanged { get; set; }

    [Parameter]
    public IResourceGroup SelectedResourceGroup { get; set; }

    [Parameter]
    public EventCallback<IResourceGroup> SelectedResourceGroupChanged { get; set; }

    [Parameter]
    public IFunctionApp SelectedFunction { get; set; }

    [Parameter]
    public EventCallback<IFunctionApp> SelectedFunctionChanged { get; set; }

    private IAzure _azure;

    protected override void OnInitialized()
    {
        Subscriptions = Platform.GetCredential().GetAzure().Subscriptions.List();
    }

    protected async Task SetAzureSubscription(ISubscription subscription)
    {
        SelectedSubscription = subscription;
        await SelectedSubscriptionChanged.InvokeAsync(SelectedSubscription);

        _azure = Platform.GetCredential(SelectedSubscription.SubscriptionId).GetAzure();
        ResourceGroups = await _azure.ResourceGroups.ListAsync();
    }

    protected async Task SetResourceGroup(IResourceGroup resourceGroup)
    {
        SelectedResourceGroup = resourceGroup;
        await SelectedResourceGroupChanged.InvokeAsync(SelectedResourceGroup);

        Resources = await _azure.AppServices.FunctionApps.ListByResourceGroupAsync(SelectedResourceGroup.Name);
    }

    protected async Task SetFunction(IFunctionApp functionApp)
    {
        SelectedFunction = functionApp;
        await SelectedFunctionChanged.InvokeAsync(SelectedFunction);
    }
}
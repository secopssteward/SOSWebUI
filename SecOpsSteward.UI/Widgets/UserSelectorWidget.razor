<MudAutocomplete @ref="autocomplete" T="UserModel" Placeholder="Search Users" Value="@UserModel" SearchFunc="Search" Variant="Variant.Outlined" ValueChanged="OnSearchResult" AdornmentIcon="@Icons.Material.Outlined.Person"
                 ToStringFunc="@(e => e == null ? null : $"{e.Username} ({e.DisplayName})")" ReadOnly="@ReadOnly">
    <ItemTemplate Context="result">
        <MudText>@result.Username</MudText>
        <MudText Typo="Typo.body2">@result.DisplayName</MudText>
    </ItemTemplate>
</MudAutocomplete>

@code
{
    [Parameter]
    public UserModel UserModel { get; set; }

    [Parameter]
    public EventCallback<UserModel> UserModelChanged { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    protected MudAutocomplete<UserModel> autocomplete;

    private async Task<IEnumerable<UserModel>> Search(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            return new UserModel[0];
        }
        var results = await DbContext.Users.Where(type => type.DisplayName.ToLower().Contains(text.ToLower()) || type.Username.ToLower().Contains(text.ToLower())).ToListAsync();
        return results;
    }

    private async Task OnSearchResult(UserModel entry)
    {
        UserModel = entry;
        await UserModelChanged.InvokeAsync(UserModel);
        await Task.Delay(1000);
        await autocomplete.Clear();
    }
}
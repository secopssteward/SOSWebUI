@using Microsoft.Azure.Management.ResourceManager.Fluent
@using SecOpsSteward.Plugins.Discovery
@using SecOpsSteward.Shared.DiscoveryWorkflow
@using SecOpsSteward.Shared.Packaging
@using Microsoft.Azure.Management.Fluent
<MudContainer Class="p-3 mb-5">
    <MudItem xs="12">
        <MudSelect T="ISubscription" Label="Subscription" Strict="true" Variant="Variant.Outlined" Class="py-2"
                   Value="@SelectedSubscription" ValueChanged="@SetAzureSubscription">
            @foreach (var subscription in Subscriptions)
            {
                <MudSelectItem T="ISubscription" Value="@subscription">@subscription.DisplayName</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    @if (ResourceGroups != null && ResourceGroups.Any())
    {
        <MudItem xs="12">
            <MudSelect T="IResourceGroup" Label="Resource Group" Variant="Variant.Outlined" Class="py-2"
                       MultiSelection="true"
                       MultiSelectionTextFunc="@(t => string.Join(", ", SelectedRGs.Select(r => r.Name)))"
                       OnBlur="@(b => SetResourceGroups())"
                       @bind-SelectedValues="@SelectedRGs">                       
                @foreach (var resourceGroup in ResourceGroups.OrderBy(rg => rg.Name))
                {
                    <MudSelectItem T="IResourceGroup" Value="@resourceGroup">@resourceGroup.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    }

    @if (_resourcesLoaded)
    {
        <MudItem xs="12">
            <MudSelect T="DiscoveredServiceConfiguration" Label="Resource" Variant="Variant.Outlined" Class="py-2"
                       MultiSelectionTextFunc="@(t => SelectedRs.Count + " resources selected")" 
                       MultiSelection="true"
                       @bind-SelectedValues="@SelectedRs"
                       OnBlur="@(b => SetResources())">
                @foreach (var resource in Resources.OrderBy(r => r.DescriptiveName))
                {
                    <MudSelectItem T="DiscoveredServiceConfiguration" Value="@resource">@resource.DescriptiveName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    }
    else if (_resourcesLoading)
    {
        <MudSkeleton/>
    }
</MudContainer>

@code
{
    public HashSet<IResourceGroup> SelectedRGs { get; set; } = new();
    public HashSet<DiscoveredServiceConfiguration> SelectedRs { get; set; } = new();

    // Select N resources from all given ManagedServiceModels

    protected IEnumerable<ISubscription> Subscriptions { get; set; } = new List<ISubscription>();
    protected IEnumerable<IResourceGroup> ResourceGroups { get; set; } = new List<IResourceGroup>();
    protected List<DiscoveredServiceConfiguration> Resources { get; set; } = new();

    [Inject]
    public AzureCurrentCredentialFactory InjectedAzure { get; set; }

    [Inject]
    public DiscoverySequencerService DiscoveryService { get; set; }

    [Inject]
    public PackageActionsService PackageActions { get; set; }

    [Parameter]
    public IEnumerable<ManagedServiceModel> Services { get; set; }

    [Parameter]
    public ISubscription SelectedSubscription { get; set; }

    [Parameter]
    public EventCallback<ISubscription> SelectedSubscriptionChanged { get; set; }

    [Parameter]
    public HashSet<IResourceGroup> SelectedResourceGroups { get; set; }

    [Parameter]
    public EventCallback<HashSet<IResourceGroup>> SelectedResourceGroupsChanged { get; set; }

    [Parameter]
    public HashSet<DiscoveredServiceConfiguration> SelectedResources { get; set; } = new();

    [Parameter]
    public EventCallback<HashSet<DiscoveredServiceConfiguration>> SelectedResourcesChanged { get; set; }

    private bool _resourcesLoaded;
    private bool _resourcesLoading;
    private IAzure _azure;

    protected override void OnInitialized()
    {
        Subscriptions = InjectedAzure.GetCredential().GetAzure().Subscriptions.List();
    }

    protected async Task SetAzureSubscription(ISubscription subscription)
    {
        SelectedSubscription = subscription;
        await SelectedSubscriptionChanged.InvokeAsync(SelectedSubscription);

        _azure = InjectedAzure.GetCredential(SelectedSubscription.SubscriptionId).GetAzure();
        ResourceGroups = await _azure.ResourceGroups.ListAsync();
    }

    protected async Task SetResourceGroups()
    {
        SelectedResourceGroups = SelectedRGs;

        _resourcesLoading = true;
        _resourcesLoaded = false;
        await SelectedResourceGroupsChanged.InvokeAsync(SelectedResourceGroups);

        await Task.WhenAll(Services.Select(service => Task.Run(async () =>
        {
            foreach (var rg in SelectedRGs)
            {
                var thisRg = rg;
                var thisCfg = new AzureSharedConfiguration
                {
                    TenantId = InjectedAzure.GetCredential().TenantId,
                    SubscriptionId = SelectedSubscription.SubscriptionId,
                    ResourceGroup = thisRg.Name
                };
                var thisCfgString = ChimeraSharedHelpers.SerializeToString(thisCfg);
                var discovered = await PackageActions.Discover(service.ManagedServiceId, ChimeraSharedHelpers.SerializeToString(thisCfg));

                foreach (var el in discovered)
                {
                    lock (Resources)
                    {
                        if (!Resources.Any(r => r.DescriptiveName == el.DescriptiveName))
                            Resources.Add(el);
                    }
                }
            }
        })));

        _resourcesLoading = false;
        _resourcesLoaded = true;
    }

    protected async Task SetResources()
    {
        SelectedResources = SelectedRs;
        await SelectedResourcesChanged.InvokeAsync(SelectedResources);
    }
}
@using SecOpsSteward.Shared.Packaging
@inherits LayoutComponentBase

<CascadingAuthenticationState>
    <CascadingValue Value="@MessageProcessor" Name="MessageProcessor">
        @if (Startup.FirstRun)
        {
            <MudOverlay Visible="true" DarkBackground="true" AutoClose="true" OnClick="@(() => Startup.FirstRun = false)">
                <CenteredPaperComponent>
                    <SecOpsSteward.UI.Pages.WelcomeComponent/>
                </CenteredPaperComponent>
            </MudOverlay>
        }
        @Body
    </CascadingValue>
</CascadingAuthenticationState>

@inject PublicPackageRepository PackageService

@code
{
    [Inject]
    protected NavigationManager NavManager { get; set; }

    [Inject]
    public WorkflowMessageProcessorService MessageProcessor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!DbContext.Users.Any())
        {
            Startup.FirstRun = true;
            StateHasChanged();

            Snackbar.Add("Registering user " + CurrentUser.Email, Severity.Info);
            await DataBoundApi.AddUser(CurrentUser, ChimeraUserRole.GlobalAdmin);
            Snackbar.Add("Done registering user " + CurrentUser.Email, Severity.Success);
        }
        else
            MessageProcessor.StartBackgroundTask(); // start polling for messages

        // Process WF receipts back into the database
        MessageProcessor.SubscribeWorkflowReceipt(async wfr =>
        {
            // TODO: Group these together by adding to a queue and keeping a timer for (if nothing is received within 5-10s, fire)
            using (var cxt = DbContextFactory.CreateDbContext())
            {
                var match = cxt.WorkflowExecutions.FirstOrDefault(wem => wem.ExecutionId == wfr.ExecutionId);
                if (match == null) return;

                Snackbar.Add($"Received receipt for Workflow {wfr.WorkflowId.ShortId()}. Migrating decrypted receipt to storage.");
                match.WorkflowReceipt = wfr;
                await cxt.SaveChangesAsync();
            }
        });
    }
}
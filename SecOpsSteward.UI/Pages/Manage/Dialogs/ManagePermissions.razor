<MudTable @ref="_table" Items="@PermissionModels" @bind-SelectedItem="@SelectedModel" RowEditCommit="@(async a => await AddPermission(SelectedModel))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Permissions</MudText>
    </ToolBarContent>
    <HeaderContent>
        @if (!StartedWithAgent)
        {
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AgentPermissionModel, object>(x => x.AgentId)">Agent ID</MudTableSortLabel>
            </MudTh>
        }
        else if (!StartedWithUser)
        {
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AgentPermissionModel, object>(x => x.UserId)">User ID</MudTableSortLabel>
            </MudTh>
        }
        else if (!StartedWithPackage)
        {
            <MudTh>
                <MudTableSortLabel SortBy="new Func<AgentPermissionModel, object>(x => x.PackageId)">Package ID</MudTableSortLabel>
            </MudTh>
        }

        <MudTh>
            <div class="ml-auto mr-auto">
                <MudTooltip Text="Create" Placement="Placement.End">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" OnClick="@(() => CreatePermissionRow())"></MudIconButton>
                </MudTooltip>
            </div>
        </MudTh>

    </HeaderContent>
    <RowTemplate>
        @if (!StartedWithAgent)
        {
            <MudTd DataLabel="Agent ID">@context.AgentId.ShortId() (@context.Agent.Tag)</MudTd>
        }
        @if (!StartedWithUser)
        {
            <MudTd DataLabel="User ID">@context.User.Username (@context.User.DisplayName)</MudTd>
        }
        @if (!StartedWithPackage)
        {
            <MudTd DataLabel="Package ID">@context.Package.Name</MudTd>
        }
        <MudTd>
            <div class="ml-auto mr-auto" style="width: fit-content">
                <MudTooltip Text="Delete" Placement="Placement.End">
                    <MudIconButton Color="Color.Error" @onclick="@(() => RemovePermission(context))" Icon="@Icons.Material.Filled.Delete" Size="Size.Small"></MudIconButton>
                </MudTooltip>
            </div>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        @if (!StartedWithAgent)
        {
            <MudTd>
                <SecOpsSteward.UI.Widgets.AgentSelectorWidget @bind-AgentModel="@Agent"/>
            </MudTd>
        }
        @if (!StartedWithUser)
        {
            <MudTd>
                <SecOpsSteward.UI.Widgets.UserSelectorWidget @bind-UserModel="@User"/>
            </MudTd>
        }
        @if (!StartedWithPackage)
        {
            <MudTd>
                <SecOpsSteward.UI.Widgets.PackageSelectorWidget @bind-PackageModel="@Package"/>
            </MudTd>
        }
        <MudTd></MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[] {10, 25, 50, 100}"/>
    </PagerContent>
</MudTable>

@code {

    [Parameter]
    public AgentModel Agent
    {
        get => SelectedModel.Agent;
        set
        {
            SelectedModel.Agent = value;
            if (value != null)
                SelectedModel.AgentId = value.AgentId;
        }
    }

    [Parameter]
    public UserModel User
    {
        get => SelectedModel.User;
        set
        {
            SelectedModel.User = value;
            if (value != null)
                SelectedModel.UserId = value.UserId;
        }
    }

    [Parameter]
    public PluginMetadataModel Package
    {
        get => SelectedModel.Package;
        set
        {
            SelectedModel.Package = value;
            if (value != null)
                SelectedModel.PackageId = value.PluginId;
        }
    }

    protected AgentPermissionModel SelectedModel { get; set; } = new();

    private MudTable<AgentPermissionModel> _table;
    private List<AgentPermissionModel> PermissionModels = new();

    private bool StartedWithAgent;
    private bool StartedWithPackage;
    private bool StartedWithUser;

    protected override async Task OnInitializedAsync()
    {
        if (Agent != null) StartedWithAgent = true;
        if (Package != null) StartedWithPackage = true;
        if (User != null) StartedWithUser = true;
        await Refresh();
    }

    protected async Task Refresh()
    {
        if (StartedWithAgent)
        {
            PermissionModels = await DbContext.AgentPermissions.Include(apm => apm.User).Include(apm => apm.Package).Where(apm => apm.AgentId == Agent.AgentId).ToListAsync();
        }
        else if (StartedWithPackage)
        {
            PermissionModels = await DbContext.AgentPermissions.Include(apm => apm.User).Include(apm => apm.Agent).Where(apm => apm.PackageId == Package.PluginId).ToListAsync();
        }
        else if (StartedWithUser)
        {
            PermissionModels = await DbContext.AgentPermissions.Include(apm => apm.Agent).Include(apm => apm.Package).Where(apm => apm.UserId == User.UserId).ToListAsync();
        }
        else
        {
            PermissionModels = await DbContext.AgentPermissions.Include(apm => apm.User).Include(apm => apm.Package).Include(apm => apm.Agent).ToListAsync();
        }
    }

    private void CreatePermissionRow()
    {
        if (!StartedWithAgent) Agent = null;
        if (!StartedWithUser) User = null;
        if (!StartedWithPackage) Package = null;

        var permission = new AgentPermissionModel
        {
            Agent = Agent,
            AgentId = Agent == null ? Guid.Empty : Agent.AgentId,
            Package = Package,
            PackageId = Package == null ? Guid.Empty : Package.PluginId,
            User = User,
            UserId = User == null ? Guid.Empty : User.UserId
        };
        PermissionModels.Add(permission);
        _table.SetSelectedItem(permission);
        _table.SetEditingItem(permission);
    }

    private async Task TryExecute(Func<Task> task, string success, string failure)
    {
        try
        {
            await task();
            Snackbar.Add(success, Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(failure + ": " + ex.Message, Severity.Error);
        }
        await Refresh();
    }

    protected async Task AddPermission(AgentPermissionModel p)
    {
        await TryExecute(() => DataBoundApi.Grant(p.AgentId, p.UserId, p.PackageId), "Grant completed", "Grant failed");
    }

    protected async Task RemovePermission(AgentPermissionModel p)
    {
        await TryExecute(() => DataBoundApi.Revoke(p.AgentId, p.UserId, p.PackageId), "Revocation completed", "Revocation failed");
    }

}